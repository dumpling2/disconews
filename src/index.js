require('dotenv').config();
const { Client, GatewayIntentBits } = require('discord.js');
const cron = require('node-cron');
const fs = require('fs').promises;
const path = require('path');

// „É¢„Ç∏„É•„Éº„É´„ÅÆ„Ç§„É≥„Éù„Éº„Éà
const { fetchMultipleFeeds, removeDuplicates } = require('./news/rss');
const { filterAINews } = require('./utils/filter');
const { formatArticleEmbed, formatSummaryEmbed, formatErrorEmbed } = require('./utils/format');

// Discord „ÇØ„É©„Ç§„Ç¢„É≥„Éà„ÅÆÂàùÊúüÂåñ
const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
  ],
});

// Ë®≠ÂÆö„Éï„Ç°„Ç§„É´„ÅÆË™≠„ÅøËæº„Åø
let config = null;

async function loadConfig() {
  try {
    const configPath = path.join(__dirname, '..', 'config', 'sources.json');
    const configData = await fs.readFile(configPath, 'utf-8');
    config = JSON.parse(configData);
    console.log('‚úÖ Config loaded successfully');
  } catch (error) {
    console.error('‚ùå Error loading config:', error);
    config = { rssFeeds: [], filterSettings: { minRelevanceScore: 20, maxArticlesPerFetch: 10 } };
  }
}

// Bot Ëµ∑ÂãïÊôÇ„ÅÆÂá¶ÁêÜ
client.once('ready', async () => {
  console.log(`‚úÖ Logged in as ${client.user.tag}!`);
  
  // Ë®≠ÂÆö„Éï„Ç°„Ç§„É´„ÅÆË™≠„ÅøËæº„Åø
  await loadConfig();
  
  // ÂÆöÊúüÂÆüË°å„ÅÆË®≠ÂÆöÔºà„Éá„Éï„Ç©„É´„Éà: 1ÊôÇÈñì„Åî„Å®Ôºâ
  const interval = process.env.POST_INTERVAL || 60;
  const cronExpression = `*/${interval} * * * *`;
  
  cron.schedule(cronExpression, async () => {
    console.log('üîÑ Scheduled news fetch started...');
    await fetchAndPostNews();
  });
  
  // ÂàùÂõûÂÆüË°å
  console.log('üöÄ Initial news fetch...');
  await fetchAndPostNews();
});

// „Éã„É•„Éº„ÇπÂèñÂæó„Å®ÊäïÁ®ø
async function fetchAndPostNews() {
  try {
    const channelId = process.env.CHANNEL_ID;
    const channel = await client.channels.fetch(channelId);
    
    if (!channel) {
      console.error('‚ùå Channel not found');
      return;
    }
    
    // ÊúâÂäπ„Å™RSS„Éï„Ç£„Éº„Éâ„ÅÆURL„ÇíÂèñÂæó
    const enabledFeeds = config.rssFeeds
      .filter(feed => feed.enabled)
      .map(feed => feed.url);
    
    if (enabledFeeds.length === 0) {
      console.log('‚ö†Ô∏è  No enabled RSS feeds found');
      return;
    }
    
    console.log(`üì° Fetching from ${enabledFeeds.length} RSS feeds...`);
    
    // RSS„Éï„Ç£„Éº„Éâ„Åã„ÇâË®ò‰∫ã„ÇíÂèñÂæó
    let articles = await fetchMultipleFeeds(enabledFeeds);
    console.log(`üì∞ Fetched ${articles.length} articles`);
    
    // ÈáçË§á„ÇíÈô§Âéª
    articles = removeDuplicates(articles);
    console.log(`üîç After removing duplicates: ${articles.length} articles`);
    
    // AIÈñ¢ÈÄ£Ë®ò‰∫ã„Çí„Éï„Ç£„É´„Çø„É™„É≥„Ç∞
    const aiArticles = filterAINews(articles, config.filterSettings.minRelevanceScore);
    console.log(`ü§ñ Found ${aiArticles.length} AI-related articles`);
    
    if (aiArticles.length === 0) {
      console.log('‚ÑπÔ∏è  No AI-related news found in this fetch');
      return;
    }
    
    // ÊúÄÊñ∞Ë®ò‰∫ã„ÇíÈÅ∏ÊäûÔºàË®≠ÂÆö„Åï„Çå„ÅüÊúÄÂ§ßÊï∞„Åæ„ÅßÔºâ
    const articlesToPost = aiArticles.slice(0, config.filterSettings.maxArticlesPerFetch);
    
    // ÂêÑË®ò‰∫ã„ÇíÂÄãÂà•„Å´ÊäïÁ®ø
    for (const article of articlesToPost) {
      const embed = formatArticleEmbed(article);
      await channel.send({ embeds: [embed] });
      
      // „É¨„Éº„ÉàÂà∂ÈôêÂØæÁ≠ñ„ÅÆ„Åü„ÇÅÂ∞ë„ÅóÂæÖÊ©ü
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
    
    console.log(`‚úÖ Posted ${articlesToPost.length} articles successfully`);
  } catch (error) {
    console.error('‚ùå Error in fetchAndPostNews:', error);
    
    // „Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÈÄÅ‰ø°ÔºàÂèØËÉΩ„Å™Â†¥ÂêàÔºâ
    try {
      const channelId = process.env.CHANNEL_ID;
      const channel = await client.channels.fetch(channelId);
      if (channel) {
        const errorEmbed = formatErrorEmbed(`„Éã„É•„Éº„ÇπÂèñÂæó‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü: ${error.message}`);
        await channel.send({ embeds: [errorEmbed] });
      }
    } catch (sendError) {
      console.error('‚ùå Failed to send error message:', sendError);
    }
  }
}

// „Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞
client.on('error', (error) => {
  console.error('Discord client error:', error);
});

process.on('unhandledRejection', (error) => {
  console.error('Unhandled promise rejection:', error);
});

// Bot „É≠„Ç∞„Ç§„É≥
client.login(process.env.DISCORD_TOKEN)
  .then(() => console.log('üîê Discord login initiated'))
  .catch(error => {
    console.error('‚ùå Failed to login to Discord:', error);
    process.exit(1);
  });