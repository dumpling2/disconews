require('dotenv').config();
const { Client, GatewayIntentBits } = require('discord.js');
const cron = require('node-cron');
const fs = require('fs').promises;
const path = require('path');

// „É¢„Ç∏„É•„Éº„É´„ÅÆ„Ç§„É≥„Éù„Éº„Éà
const { fetchMultipleFeeds, removeDuplicates } = require('./news/rss');
const { scrapeMultipleGames } = require('./news/scraper');
const { filterAINews } = require('./utils/filter');
const { formatArticleEmbed, formatSummaryEmbed, formatErrorEmbed } = require('./utils/format');
const { initializeCommands, registerSlashCommands, handleInteraction } = require('./bot/commandHandler');
const { ErrorHandler, ERROR_LEVELS } = require('./utils/errorHandler');

// Discord „ÇØ„É©„Ç§„Ç¢„É≥„Éà„ÅÆÂàùÊúüÂåñ
const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
  ],
});

// Ë®≠ÂÆö„Éï„Ç°„Ç§„É´„ÅÆË™≠„ÅøËæº„Åø
let config = null;
let errorHandler = null;

async function loadConfig() {
  try {
    const configPath = path.join(__dirname, '..', 'config', 'sources.json');
    const configData = await fs.readFile(configPath, 'utf-8');
    config = JSON.parse(configData);
    console.log('‚úÖ Config loaded successfully');
  } catch (error) {
    console.error('‚ùå Error loading config:', error);
    config = { rssFeeds: [], filterSettings: { minRelevanceScore: 20, maxArticlesPerFetch: 10 } };
  }
}

// Bot Ëµ∑ÂãïÊôÇ„ÅÆÂá¶ÁêÜ
client.once('ready', async () => {
  console.log(`‚úÖ Logged in as ${client.user.tag}!`);
  
  // Ë®≠ÂÆö„Éï„Ç°„Ç§„É´„ÅÆË™≠„ÅøËæº„Åø
  await loadConfig();
  
  // „Ç®„É©„Éº„Éè„É≥„Éâ„É©„Éº„ÅÆÂàùÊúüÂåñ
  errorHandler = new ErrorHandler(client, config);
  
  // „Ç≥„Éû„É≥„Éâ„ÅÆÂàùÊúüÂåñ
  initializeCommands(client);
  await registerSlashCommands(client);
  
  // ÂÆöÊúüÂÆüË°å„ÅÆË®≠ÂÆöÔºà„Éá„Éï„Ç©„É´„Éà: 1ÊôÇÈñì„Åî„Å®Ôºâ
  const interval = process.env.POST_INTERVAL || 60;
  const cronExpression = `*/${interval} * * * *`;
  
  cron.schedule(cronExpression, async () => {
    console.log('üîÑ Scheduled news fetch started...');
    await fetchAndPostNews();
  });
  
  // ÂàùÂõûÂÆüË°å
  console.log('üöÄ Initial news fetch...');
  await fetchAndPostNews();
});

// „Ç§„É≥„Çø„É©„ÇØ„Ç∑„Éß„É≥Ôºà„Ç≥„Éû„É≥„ÉâÔºâ„ÅÆÂá¶ÁêÜ
client.on('interactionCreate', async (interaction) => {
  await handleInteraction(interaction, config);
});

// „Éã„É•„Éº„ÇπÂèñÂæó„Å®ÊäïÁ®ø
async function fetchAndPostNews() {
  try {
    const channelId = process.env.CHANNEL_ID;
    const channel = await client.channels.fetch(channelId);
    
    if (!channel) {
      console.error('‚ùå Channel not found');
      return;
    }
    
    // ÊúâÂäπ„Å™RSS„Éï„Ç£„Éº„Éâ„ÅÆURL„ÇíÂèñÂæó
    const enabledFeeds = config.rssFeeds
      .filter(feed => feed.enabled)
      .map(feed => feed.url);
    
    if (enabledFeeds.length === 0) {
      console.log('‚ö†Ô∏è  No enabled RSS feeds found');
      return;
    }
    
    console.log(`üì° Fetching from ${enabledFeeds.length} RSS feeds...`);
    
    let allArticles = [];
    
    // RSS„Éï„Ç£„Éº„Éâ„Åã„ÇâË®ò‰∫ã„ÇíÂèñÂæó
    if (enabledFeeds.length > 0) {
      const rssArticles = await fetchMultipleFeeds(enabledFeeds);
      console.log(`üì∞ RSSË®ò‰∫ãÂèñÂæó: ${rssArticles.length}‰ª∂`);
      
      // AIÈñ¢ÈÄ£Ë®ò‰∫ã„Çí„Éï„Ç£„É´„Çø„É™„É≥„Ç∞
      const aiArticles = filterAINews(rssArticles, config.filterSettings.minRelevanceScore);
      console.log(`ü§ñ AIÈñ¢ÈÄ£Ë®ò‰∫ã: ${aiArticles.length}‰ª∂`);
      allArticles.push(...aiArticles);
    }
    
    // „Ç≤„Éº„É†Èñ¢ÈÄ£„Éã„É•„Éº„Çπ„ÇíÂèñÂæó
    const enabledGames = config.gamePatches?.filter(game => game.enabled) || [];
    if (enabledGames.length > 0) {
      console.log(`üéÆ ${enabledGames.length}ÂÄã„ÅÆ„Ç≤„Éº„É†„ÇΩ„Éº„Çπ„Åã„ÇâÂèñÂæó‰∏≠...`);
      
      // RSSÂΩ¢Âºè„Å®„Çπ„ÇØ„É¨„Ç§„Éî„É≥„Ç∞ÂΩ¢Âºè„ÇíÂàÜÈõ¢
      const rssGames = enabledGames.filter(game => game.type === 'rss');
      const dynamicGames = enabledGames.filter(game => game.type === 'dynamic');
      
      let gameArticles = [];
      
      // RSSÂΩ¢Âºè„ÅÆ„Ç≤„Éº„É†„Éã„É•„Éº„Çπ
      if (rssGames.length > 0) {
        const gameRssUrls = rssGames.map(game => game.url);
        const rssGameArticles = await fetchMultipleFeeds(gameRssUrls);
        gameArticles.push(...rssGameArticles);
        console.log(`üéÆ RSS „Ç≤„Éº„É†„Éã„É•„Éº„Çπ: ${rssGameArticles.length}‰ª∂`);
      }
      
      // ÂãïÁöÑ„Çπ„ÇØ„É¨„Ç§„Éî„É≥„Ç∞ÂΩ¢Âºè
      if (dynamicGames.length > 0) {
        const scrapedArticles = await scrapeMultipleGames(dynamicGames);
        gameArticles.push(...scrapedArticles);
        console.log(`üéÆ „Çπ„ÇØ„É¨„Ç§„Éî„É≥„Ç∞ „Ç≤„Éº„É†„Éã„É•„Éº„Çπ: ${scrapedArticles.length}‰ª∂`);
      }
      
      console.log(`üéÆ „Ç≤„Éº„É†Èñ¢ÈÄ£Ë®ò‰∫ãÂêàË®à: ${gameArticles.length}‰ª∂`);
      allArticles.push(...gameArticles);
    }
    
    // ÈáçË§á„ÇíÈô§Âéª
    allArticles = removeDuplicates(allArticles);
    console.log(`üîç ÈáçË§áÈô§ÂéªÂæå: ${allArticles.length}‰ª∂`);
    
    if (allArticles.length === 0) {
      console.log('‚ÑπÔ∏è ÊäïÁ®ø„Åô„ÇãË®ò‰∫ã„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü');
      return;
    }
    
    // Êó•‰ªòÈ†Ü„Å´„ÇΩ„Éº„Éà„Åó„Å¶ÊúÄÊñ∞Ë®ò‰∫ã„ÇíÈÅ∏Êäû
    allArticles.sort((a, b) => b.pubDate - a.pubDate);
    const articlesToPost = allArticles.slice(0, config.filterSettings.maxArticlesPerFetch);
    
    // ÂêÑË®ò‰∫ã„ÇíÂÄãÂà•„Å´ÊäïÁ®ø
    for (const article of articlesToPost) {
      const embed = formatArticleEmbed(article);
      await channel.send({ embeds: [embed] });
      
      // „É¨„Éº„ÉàÂà∂ÈôêÂØæÁ≠ñ„ÅÆ„Åü„ÇÅÂ∞ë„ÅóÂæÖÊ©ü
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
    
    console.log(`‚úÖ Posted ${articlesToPost.length} articles successfully`);
  } catch (error) {
    console.error('‚ùå Error in fetchAndPostNews:', error);
    
    // „Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÈÄÅ‰ø°ÔºàÂèØËÉΩ„Å™Â†¥ÂêàÔºâ
    try {
      const channelId = process.env.CHANNEL_ID;
      const channel = await client.channels.fetch(channelId);
      if (channel) {
        const errorEmbed = formatErrorEmbed(`„Éã„É•„Éº„ÇπÂèñÂæó‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü: ${error.message}`);
        await channel.send({ embeds: [errorEmbed] });
      }
    } catch (sendError) {
      console.error('‚ùå Failed to send error message:', sendError);
    }
  }
}

// „Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞
client.on('error', (error) => {
  console.error('Discord client error:', error);
});

process.on('unhandledRejection', (error) => {
  console.error('Unhandled promise rejection:', error);
});

// Bot „É≠„Ç∞„Ç§„É≥
client.login(process.env.DISCORD_TOKEN)
  .then(() => console.log('üîê Discord login initiated'))
  .catch(error => {
    console.error('‚ùå Failed to login to Discord:', error);
    process.exit(1);
  });